// Auto-generated Lua scripts in PROGMEM

#pragma once
#include <Arduino.h>
#include <map>
#include <pgmspace.h>
#include "esp_heap_caps.h"

static const char help_script[] PROGMEM = "print(\"\\n=== Lua Scripts ===\")\n"
"if bakedScripts then\n"
"    for name, _ in pairs(bakedScripts) do\n"
"        print(\"- \" .. name)\n"
"    end\n"
"else\n"
"    print(\"No baked scripts available\")\n"
"end";
static const char meowdit_script[] PROGMEM = "-- Serial Lua Text Editor with SPIFFS I/O\n"
"-- Commands:\n"
"--  :w          save buffer to file\n"
"--  :q          quit\n"
"--  :wq         save and quit\n"
"--  :ls         list files\n"
"--  :load <file> load file\n"
"--  Ctrl+C      quit\n"
"\n"
"local buffer = {}\n"
"local filename = ...\n"
"\n"
"local f, err = io.open(filename, \"r\")\n"
"if not f then\n"
"    Serial.println(\"Error opening file: \" .. (err or \"unknown\"))\n"
"    return false\n"
"end\n"
"\n"
"-- Clear screen\n"
"local function cls()\n"
"    Serial.print(string.char(27) .. \"[2J\" .. string.char(27) .. \"[H\")\n"
"end\n"
"\n"
"-- Draw editor UI\n"
"local function draw()\n"
"    cls()\n"
"    Serial.println(\"Lua Serial Editor - \" .. filename)\n"
"    Serial.println(\"Commands: :w, :q, :wq, :ls, :load <file>\")\n"
"    Serial.println(\"=================================\")\n"
"    for i, line in ipairs(buffer) do\n"
"        Serial.println(i .. \": \" .. line)\n"
"    end\n"
"    Serial.print(\"> \")\n"
"end\n"
"\n"
"-- Save buffer to file\n"
"local function saveFile()\n"
"    local f, err = io.open(filename, \"w\")\n"
"    if not f then\n"
"        Serial.println(\"Error saving file: \" .. (err or \"unknown\"))\n"
"        return false\n"
"    end\n"
"    for _, line in ipairs(buffer) do\n"
"        f:write(line, \"\\n\")\n"
"    end\n"
"    f:close()\n"
"    Serial.println(\"File saved: \" .. filename)\n"
"    return true\n"
"end\n"
"\n"
"-- Load file into buffer\n"
"local function loadFile(name)\n"
"    local f, err = io.open(name, \"r\")\n"
"    if not f then\n"
"        Serial.println(\"Error opening file: \" .. (err or \"unknown\"))\n"
"        return false\n"
"    end\n"
"    buffer = {}\n"
"    while true do\n"
"        local line = f:read(\"*l\")\n"
"        if not line then break end\n"
"        table.insert(buffer, line)\n"
"    end\n"
"    f:close()\n"
"    filename = name\n"
"    Serial.println(\"File loaded: \" .. filename)\n"
"    return true\n"
"end\n"
"\n"
"-- List files in SPIFFS\n"
"local function listFiles()\n"
"    local files = io.ls(\"/\")\n"
"    if not files then\n"
"        Serial.println(\"No files found.\")\n"
"        return\n"
"    end\n"
"    Serial.println(\"Files:\")\n"
"    for i, name in ipairs(files) do\n"
"        Serial.println(\"  \" .. name)\n"
"    end\n"
"end\n"
"\n"
"-- Read line from Serial\n"
"local function readLine()\n"
"    local line = \"\"\n"
"    while true do\n"
"        while Serial.available() > 0 do\n"
"            local c = Serial.read()\n"
"            if c == 13 or c == 10 then  -- CR/LF\n"
"                if #line > 0 then return line end\n"
"            else\n"
"                line = line .. string.char(c)\n"
"            end\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"-- Main editor loop\n"
"local running = true\n"
"while running do\n"
"    draw()\n"
"    local line = readLine()\n"
"    if not line then break end\n"
"\n"
"    if line == \":q\" then\n"
"        running = false\n"
"    elseif line == \":w\" then\n"
"        saveFile()\n"
"    elseif line == \":wq\" then\n"
"        if saveFile() then running = false end\n"
"    elseif line == \":ls\" then\n"
"        listFiles()\n"
"    elseif line:match(\"^:load%s+\") then\n"
"        local name = line:match(\"^:load%s+(.+)\")\n"
"        if name then loadFile(name) end\n"
"    else\n"
"        table.insert(buffer, line)\n"
"    end\n"
"end\n"
"\n"
"Serial.println(\"Editor exited.\")\n"
"";
static const char lua_script[] PROGMEM = "print(\"Welcome to Lua REPL! Type 'exit' to quit.\")\n"
"\n"
"while true do\n"
"    print(\"> \")  -- prompt\n"
"    local line = Serial.readLine()  -- read a line from input\n"
"    if not line then break end\n"
"    line = line:gsub(\"^%s*(.-)%s*$\", \"%1\")  -- trim spaces\n"
"\n"
"    if line == \"exit\" then\n"
"        print(\"Bye!\")\n"
"        break\n"
"    end\n"
"\n"
"    -- Try to load as an expression first\n"
"    local func, err = load(\"return \" .. line)\n"
"    if not func then\n"
"        -- fallback: try as a statement\n"
"        func, err = load(line)\n"
"    end\n"
"\n"
"    if func then\n"
"        local ok, result = pcall(func)\n"
"        if ok and result ~= nil then\n"
"            print(result)\n"
"        elseif not ok then\n"
"            print(\"Error:\", result)\n"
"        end\n"
"    else\n"
"        print(\"Error:\", err)\n"
"    end\n"
"end\n"
"";

// Lua script map (runtime map pointing to flash strings)
static std::map<String, const char*>* luaScriptMap = nullptr;

static void initLuaScriptMap() {
    if (luaScriptMap) return;
    luaScriptMap = (std::map<String, const char*>*) heap_caps_malloc(
        sizeof(std::map<String, const char*>), MALLOC_CAP_SPIRAM
    );
    if (!luaScriptMap) {
        luaScriptMap = new std::map<String, const char*>(); // fallback to normal heap
    } else {
        new (luaScriptMap) std::map<String, const char*>(); // placement new in PSRAM
    }
    (*luaScriptMap)["help"] = help_script;
    (*luaScriptMap)["meowdit"] = meowdit_script;
    (*luaScriptMap)["lua"] = lua_script;
}
